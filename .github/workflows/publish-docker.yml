name: Build and Publish Docker Images

on:
  pull_request:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-executable:
    name: Build Single File Executable
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Get version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Build single file executable
        run: |
          mkdir -p dist
          bun run scripts/build-executables.js
          ls -la dist/

      - name: Test executable
        run: |
          chmod +x dist/unify-linux-x64
          ./dist/unify-linux-x64 --version

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: unify-linux-executable
          path: dist/unify-linux-x64
          retention-days: 1

  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-executable
    permissions:
      contents: read
      packages: write
    strategy:
        matrix:
          include:
            - dockerfile: Dockerfile.cli
              image: unify
              readme: README.cli.md
              platforms: linux/amd64,linux/arm64
            - dockerfile: Dockerfile.nginx
              image: unify-nginx
              readme: README.nginx.md
              platforms: linux/amd64,linux/arm64
            - dockerfile: Dockerfile.apache
              image: unify-apache
              readme: README.apache.md
              platforms: linux/amd64,linux/arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download executable artifact
        uses: actions/download-artifact@v4
        with:
          name: unify-linux-executable
          path: dist/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # - name: Log in to GitHub Container Registry
      #   if: github.event_name != 'pull_request'
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from package.json
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            fwdslsh/${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Log in to Docker Hub
        if: github.event_name == 'release'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/${{ matrix.dockerfile }}
          platforms: ${{ matrix.platforms }}
          push: ${{ github.event_name == 'release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update Docker Hub README
        if: github.event_name == 'release'
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: fwdslsh/${{ matrix.image }}
          readme-filepath: docker/${{ matrix.readme }}

  test-docker-images:
    name: Test Docker Images
    runs-on: ubuntu-latest
    needs: build-docker-images
    if: github.event_name == 'release'
    strategy:
      matrix:
        image: [unify, unify-nginx, unify-apache]
    steps:
      - name: Test CLI image
        if: matrix.image == 'unify'
        run: |
          docker run --rm fwdslsh/${{ matrix.image }}:latest unify --version

      - name: Test NGINX image
        if: matrix.image == 'unify-nginx'
        run: |
          # Test that unify command is available
          docker run --rm fwdslsh/${{ matrix.image }}:latest unify --version

          # Test basic functionality with a simple site
          mkdir -p test-site
          echo '<h1>Test Site</h1>' > test-site/index.html

          # Test build functionality
          docker run --rm -v $(pwd)/test-site:/site fwdslsh/${{ matrix.image }}:latest \
            unify build --source /site --output /tmp/out

      - name: Test Apache image
        if: matrix.image == 'unify-apache'
        run: |
          # Test that Apache can start and serve content
          echo '<h1>Test Site</h1>' > test-apache.html
          
          # Test basic functionality with a simple site
          timeout 10 docker run --rm -v $(pwd)/test-apache.html:/var/www/html/index.html \
            fwdslsh/${{ matrix.image }}:latest timeout 5 /usr/sbin/apache2 -D FOREGROUND || true

          echo "âœ… Docker image tests passed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-docker-images
    if: github.event_name == 'release'
    strategy:
      matrix:
        image: [unify, unify-nginx, unify-apache]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: fwdslsh/${{ matrix.image }}:latest
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
